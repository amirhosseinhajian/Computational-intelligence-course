import numpy as np

THETA = 0.2
ALPHA = 1

def perceptron(all_fonts, targets):
    w = []
    for i in range(63):
        w.append(0)
    w = np.array(w)
    b = 0
    epoch = 1
    while True:
        counter = 0
        for i in range(len(all_fonts)):
            x = all_fonts[i]
            y_in = b + np.dot(x, w)
            if y_in > THETA:
                y = 1
            elif y_in < -THETA:
                y = -1
            else:
                y = 0
            t = targets[i]
            if t != y:
                w += np.dot(np.dot(x, t), ALPHA)
                b += ALPHA * t
            else:
                counter += 1
        if counter == len(all_fonts):
            break
        epoch += 1
    return w, b

A_fonts = [[-1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1,
           -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1,
            -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1],
           [-1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1,
           -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1,
           -1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1],
           [-1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1,
           -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1,
           1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1],
          [-1, -1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1,
           -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, 1, -1,
           -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1]]

B_fonts = [[1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1,
           -1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1,
           -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1],
           [1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1,
           1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, -1, 1,
           1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1],
           [1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1,
           -1, 1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1,
           -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1],
           [-1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1,
           -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1,
           -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1]]

C_fonts = [[-1, -1, 1, 1, 1, 1, 1, -1, 1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1,
           1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1,
           1, -1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1],
           [-1, -1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1,
           1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1,
           1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1],
           [-1, -1, 1, 1, 1, -1, 1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1, -1, -1, -1, 1,
           1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1,
           1, -1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1],
           [-1, -1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, -1,
           -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1,
           -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, -1, 1, 1, 1, -1, -1]]

D_fonts = [[1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, 1,
           -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1,
           -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1],
           [1, 1, 1, 1, 1, -1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, -1, 1,
           1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, 1,
           1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1],
           [1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, -1, 1,
           -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, -1, 1,
           -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, -1, 1, 1, 1, 1, 1, -1, -1],
           [-1, 1, 1, 1, 1, -1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1,
           -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1,
           -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, -1, 1, 1, 1, 1, -1, -1]]

all_fonts = A_fonts + B_fonts + C_fonts + D_fonts
A_targets = [1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]
B_targets = [-1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1]
C_targets = [-1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1, -1, -1, -1, -1]
D_targets = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, 1, 1]
A_weights, A_bias = perceptron(all_fonts, A_targets)
B_weights, B_bias = perceptron(all_fonts, B_targets)
C_weights, C_bias = perceptron(all_fonts, C_targets)
D_weights, D_bias = perceptron(all_fonts, D_targets)

print('---------------------------------------------------------------')
print('Weights of x1, x2,..., x63 of character A:', A_weights)
print('And the bias weight is:', A_bias)
print('---------------------------------------------------------------')
print('Weights of x1, x2,..., x63 of character B:', B_weights)
print('And the bias weight is:', B_bias)
print('---------------------------------------------------------------')
print('Weights of x1, x2,..., x63 of character C:', C_weights)
print('And the bias weight is:', C_bias)
print('---------------------------------------------------------------')
print('Weights of x1, x2,..., x63 of character D:', D_weights)
print('And the bias weight is:', D_bias)
print('---------------------------------------------------------------')
print('---------------------------------------------------------------')


########## If you want to insert a font for test please enter your font on this list:
########## for example: test_insert = [-1, -1, 1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1, -1, -1, -1, 1, -1, -1, -1,
##########           -1, -1, 1, -1, 1, -1, -1, -1, -1, 1, -1, 1, -1, -1, -1, 1, 1, 1, 1, 1, -1,
##########            -1, 1, -1, -1, -1, 1, -1, -1, 1, -1, -1, -1, 1, -1, 1, 1, 1, -1, 1, 1, 1]
test_insert = []
#########

print("This program recognizes the following characters: A, B, C, D")
choice = int(input("""If you want to test a font of these characters please press 1
and If you want to exit this program please press 0 """))
while choice:
    flag = []
    test_font = []
    print("-----------------------------------------------------")
    status = int(input("if you want to enter a font In one-on-one mode press 1 and if you inserted font in test_insert list press 2: "))
    if status == 1:
        for i in range(63):
            test_font.append(int(input(f"Please enter x{i+1}: ")))
    elif status == 2:
        test_font = test_insert
    if np.dot(A_weights, test_font) + A_bias > THETA:
        flag.append('A')
    if np.dot(B_weights, test_font) + B_bias > THETA:
        flag.append('B')
    if np.dot(C_weights, test_font) + C_bias > THETA:
        flag.append('C')
    if np.dot(D_weights, test_font) + D_bias > THETA:
        flag.append('D')
    if len(flag) == 0:
        print("Sorry! This font Dosnt recognizes by the network.")
    elif len(flag) > 1:
        print("Characters identified for this font by this network:", end=" ")
        for char in flag:
            print(char, end=", ")
        print()
    else:
        print("Characters identified for this font by the network is: ", flag[0])
    print("-----------------------------------------------------------------------------")
    choice = int(input("If you want to enter another font enter 1 and enter 0 for exit."))
